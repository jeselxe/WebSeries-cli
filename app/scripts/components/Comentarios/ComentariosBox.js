import React, { PropTypes } from 'react';
import CommentForm from './ComentariosForm';
import CommentList from './ComentariosList';
import config from '../../config';

class ComentariosBox extends React.Component {
    constructor(props) {
        super(props);
        this.state = { data : [] };
    }
    handleCommentSubmit(comment) {
        var comments = this.state.data;
        // Optimistically set an id on the new comment. It will be replaced by an
        // id generated by the server. In a production application you would likely
        // not use Date.now() for this and would have a more robust system in place.
        comment.id = Date.now();
        var newComments = comments.concat([comment]);
        this.setState({data: newComments});

        $.ajax({
            url: config.api.url + '/series/' + this.props.serie + '/temporada/' + this.props.temporada + '/capitulo/' + this.props.capitulo + '/comentario',
            dataType: 'json',
            type: 'POST',
            data: comment,
            success: function(data) {
                this.setState({data: data.comentarios});
            }.bind(this),
            error: function(xhr, status, err) {
                this.setState({data: comments});
                console.error(this.props.url, status, err.toString());
            }.bind(this)
        });
    }
    loadCommentsFromServer(temporada, capitulo) {
        $.ajax({
            url: config.api.url + '/series/' + this.props.serie + '/temporada/' + temporada + '/capitulo/' + capitulo,
            dataType: 'json',
            type: 'GET',
            success: function(data) {
                this.setState({data: data.comentarios});
            }.bind(this),
            error: function(xhr, status, err) {
                this.setState({
                    data:[] 
                });
                console.error(this.props.url, status, err.toString());
            }.bind(this)
        });
    }
    componentWillReceiveProps(nextProps) {
        if (nextProps.capitulo != undefined) {
            this.loadCommentsFromServer(nextProps.temporada, nextProps.capitulo);
        }

    }
    render () {
        return (
            <div className='commentBox'>
                <h4>Comentarios</h4>
                <CommentForm onCommentSubmit={this.handleCommentSubmit.bind(this)} />
                <CommentList data={this.state.data}/>
            </div>
        );
    }
}

export default ComentariosBox;
